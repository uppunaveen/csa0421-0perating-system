#include <stdio.h>

struct process {
    int pid;
    int burst_time;
    int waiting_time;
    int turnaround_time;
    int completed;
};

void sort_processes(struct process *procs, int n) {
    int i, j;
    struct process temp;
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (procs[i].burst_time > procs[j].burst_time) {
                temp = procs[i];
                procs[i] = procs[j];
                procs[j] = temp;
            }
        }
    }
}

void compute_times(struct process *procs, int n) {
    int i, j;
    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    float avg_waiting_time, avg_turnaround_time;
    procs[0].waiting_time = 0;
    procs[0].turnaround_time = procs[0].burst_time;
    total_waiting_time = 0 + procs[0].waiting_time;
    total_turnaround_time = procs[0].turnaround_time;
    for (i = 1; i < n; i++) {
        procs[i].waiting_time = procs[i - 1].burst_time + procs[i - 1].waiting_time;
        procs[i].turnaround_time = procs[i].waiting_time + procs[i].burst_time;
        total_waiting_time += procs[i].waiting_time;
        total_turnaround_time += procs[i].turnaround_time;
    }
    avg_waiting_time = (float)total_waiting_time / (float)n;
    avg_turnaround_time = (float)total_turnaround_time / (float)n;
    printf("\nPID\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", procs[i].pid, procs[i].burst_time, procs[i].waiting_time, procs[i].turnaround_time);
    }
    printf("Average waiting time: %f\n", avg_waiting_time);
    printf("Average turnaround time: %f\n", avg_turnaround_time);
}

int main() {
    int i, n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process procs[n];
    for (i = 0; i < n; i++) {
        printf("Enter the burst time for process %d: ", i + 1);
        scanf("%d", &procs[i].burst_time);
        procs[i].pid = i + 1;
        procs[i].completed = 0;
    }
    sort_processes(procs, n);
    compute_times(procs, n);
    return 0;
}
